@알고리즘 (종만북)

*다익스트라,벨만포드,플로이드와샬 과정(시간복잡도) 정확히 이해하기
-- https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%81%AC%EC%8A%A4%ED%8A%B8%EB%9D%BC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98#CITEREFFredmanTarjan1984
=> 다익스트라
--https://ko.wikipedia.org/wiki/%EB%B2%A8%EB%A8%BC-%ED%8F%AC%EB%93%9C_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
=>벨먼포드
-- https://ko.wikipedia.org/wiki/%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%9B%8C%EC%85%9C_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98
=> 플로이드워셜 =>for(k),(j), (i) 돌면서 갱신

-- O(|E| + |E|log|E|) =>why? (while+for(V+E) * logV(힙) ) => O(|E|log|V|) =>(실행횟수)
=> ** while(V) * logV(꺼내기) + for(E) * logV(삽입),, logV 인 이유

*시간복잡도
-- 순서대로, 실행횟수, 최악 =>  보편적, 빅오(O) 

*조합탐색
-- 1~N까지 각 정수 포함,  이 집합에서 나올 수 있는 모든 경우의 수 정렬되어있다고 가정, 
ex) 1, 4, 2, 3 은 몇번째 자리수인가??
=> (k - c) * (n - c)! + .... (매번 c++) => 자리수마다의 경우의 수
-- 조합탐색이용=>정렬된 순서 확인가능
-- != 상대적크기비교 ex) 10, 40, 30, 20 => 1, 4, 3, 2