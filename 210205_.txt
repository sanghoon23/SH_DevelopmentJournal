@알고리즘 ( 종만북 ) 


*트리의 구현과 순회 =>(연상)전위,중위,후위
-- 재귀적성질
-- 부모,자식,형제,선조,자손,루트,리프,깊이,높이, 서브트리
-- 이진검색트리(탐색형트리자료구조예),완전이진트리(힙,꽉채워진),DisjointSet(부모의ptr)
-- 트리의 높이 구하기(BFS,DFS)
-- 전위 , 중위 , 후위 순회
-- ex)트리순회순서변경문제=>전위,중위데이터=>후위는??(slice),   요새문제(DFS,BFS)

*이진검색트리 =>(연상)L<=Root<R
-- 원소의 추가, 삭제, 특정원소의 존재여부=> "검색을 위한 트리"
-- 이진검색트리(L<=Root<R) != 이진탐색(분할정복)  != 이진트리
-- 두 개의 자식(이진트리기반), 이진검색트리에서의 중위순회
-- 단순배열과의 차이점=>추가,삭제(합치기=>오른쪽서브트리,재귀적)
-- 임의의X =>X보다 작은 원소의 수 찾기(X_Left트리크기), X번째 원소 찾기(중위순회)
-- 저장순서에 따른 최악의 경우=>ex)1, 2, 3=> O(N)
-- 최악(편향트리(skewed))=>"평평한" 트리=>(꽉채우기)=>트리의최소높이
-- 위 문제해결=>균형 잡힌 이진검색트리(높이가항상(O(logN)이되도록)
-- ex) 레드-블랙 트리(Balanced ...Tree)=>map   != unodered_map(HashTable)
-- Balanced Binary Search Tree => 삽입,삭제,검색(logN)
@@210205-(뒷내용추가해야함)

*우선순위큐 와 힙 =>(연상)힙트리
-- 힙트리(완전이진트리)=>추가(logN),꺼내기(logN) !=균형잡힌이진검색트리
-- 최대힙(MaxHeap), 최소힙(MinHeap),, 힙의대소관계규칙
-- 완전이진트리=>배열의표현(Node*2),(Node*2 + 1)
-- 트리 전체의 구조=>트리에 포함된 노드의 개수
-- 추가(마지막->부모비교), 꺼내기(마지막->자식비교)
-- 힙만들기(N)=>꺼내기(NlogN)=>큰의미(X)
-- 힙정렬(NlogN)=>(힙만들기(N) *  꺼내기(NlogN))
-- ex)변화하는중간값문제(절반,MinHeap,MaxHeap)

*트라이=>(연상)TreeNode* Child[Alpabets]
-- 문자열 특화 자료구조=>공간복잡도문제=>1123_Autocomplete(Programmers)
-- 알파벳대문자(26개포인터배열)=>메모리낭비 But 다음노드찾는과정=>O(M)
-- 접미사트라이=>심각메모리낭비=>접미사트리(여러글자대응)=>대회에선잘사용(X)
-- 보통 접미사배열 사용
-- ex)안녕히,물고기문제=>(빈도,사전순)정렬, first = id 로 해당문자열자동완성구분
@@210205-(아호코라식부터)


