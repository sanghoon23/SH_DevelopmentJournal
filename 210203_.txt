@210203
#알고리즘(종만북)

*Counting Sort, For Stable
-누적합=인덱스

*길이가 n인 문자열은 최대((n+1)n)/2 개의 부분문자열 가능.

*KMP =>(연상)TP
- T(전체), P(찾을패턴)
- 접두사와 접미사가 같은 최대 길이 A[i]=>(0~i)=>Search
- begin,match=>T에서 P가 나온 문자열의 첫 Idx=>Find
- Find의 방법을 Search(자기자신의접두접미최대길이)방법에 적용
-시간복잡도는?


*환형 시프트
- 길이를 2배로 이어붙임.

*접미사 배열 =>(연상)사전순정렬
- 모든 접미사를 사전순으로 표현
- 맨버와 마이어스 알고리즘
- (무식하게) n^2logN (sort, strcmp)
- 2t 글자 기준 nlog^2N (sort, while(t<n) t << 1)
- Group,Perm ==>> 접미사의 성질을 적극 활용(t), Group[n]= - 1
- Compare=>(Group[a]==Group[b])Group[a+t]<Group[b+t]

*접미사 배열의 이용
- 원형문자열, 서로 다른 부분문자열의 수,중복된 부분문자열의 최대길이 등.

*LCP(Longest Common Prefix) =>(연상)최대공통접두사
- 부분문자열들을 접미사들의 접두사로 표현 가능.
- 부분문자열 중 중복이 없다면, 모든 접미사의길이 = 부분문자열의 수
- "두 접미사의 최대 공통접두사의길이"
- (무식하게)N^2*logN*N=>N^3logN (부분문자열구함,set<>넣을때,각문자비교)
- Nlog^2N + N * N = N^2 (접미사배열구함,for(str),LCP)

*동적배열(벡터)
- 동적배열 != 동적으로할당받은배열(고정길이배열)
- Size(실제원소의수),Capacity(동적으로할당받은배열의용량)
- 재할당=>빈번하면,메모리단편화
- 용량부족=>두배로늘리기
- 용량 미리 늘리기=>재할당드는비용없애기=>reserve(재할당최소화)
- 사이즈잡아놓기=>resize(size넘는원소버려짐,유지)

*연결리스트
- 임의의원소찾기(선형)
- 삽입,삭제 용이(O(1)),, insert,splice(잘라붙이기)
- list2.splice(it2,list1),list2.splice(it2,list1,it1) 차이
- 삭제했던 원소 돌려놓기(undo)
- 도날드커누스(Donald Knuth)의 춤추는 링크드(Dancing Links)

