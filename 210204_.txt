@알고리즘 ( 종만북 ) 


*세그먼트트리 =>(연상)구간합
-- 일차원 배열(이진트리) 이용, 구간(연속적인) 에 대해 어떤 값을 "빠르게" 도출해야할 때.
-- 배열크기는?
-- 일반적으로, 구간 초기화, 갱신, 탐색을 분할정복(이분탐색)  이용.
-- ex) BOJ_6549 히스토그램 문제
	세그먼트(구간합)으로 접근하는 삽질.-->> 구간의합으로 큰 정사각형을 구하는 방법?(X)
	구간 최소 쿼리(RMQ)(=분할정복), 스택 이용
-- 즉, 세그먼트트리는 구간의 합, 구간의 특정 값을 도출하기 위해
	일차원배열(Node*2,Node*2+1) & 분할 정복(Start, Mid, End) 을 이용한 방법.
--  저장할곳 =>일차원배열, 초기화&탐색방법=>분할정복
-- 종만북ex) 정렬된 수열의 특정 구간에서 최대 출현 빈도 계산.
==>> 구조체를 만들고 분할정복.
-- 세그먼트트리는 완전이진트리인가?? @210205 - 생각하기

*팬윅트리 =>(연상)부분합
-- BIT(Binary Idxed Tree) (이진트리) 를 이용해, 세그먼트트리보다 빠르게 부분합을 구함.
-- 세그먼트트리(구간합), 팬윅트리(부분합)
-- 부분합(Partial Sum)=>배열A의 첫 몇 i개의 원소의합
-- 구간합(Range Sum)=>배열A의 연속된 부분 배열의 합=>차이점 이해.
-- Update(Idx += (Idx & (-Idx)), Query(Idx -=(Idx&(-Idx))
-- 즉,부분합은 첫번째부터 구하는 값=>Query 의 경우 BIT 에서 인덱스를 앞까지 당김
-- 반면,구간합은 A[i ~ j]=> i 부터 j 까지의 원소의 합을 가짐.
-- 점화식 A[i] = PSum[i] - PSum[i - 1]
-- 위 점화식을 이용함으로써, 부분합을 이용해서도 구간합을 구할 수 있음.
-- 세그먼트 트리보다 공간복잡도도 적고, 간편함.
-- 팬윅트리도 세그먼트트리와 마찬가지로, 
	=>저장할곳=>BIT, 탐색방법=> Idx += (Idx & (-Idx))
-- 종만북ex) 삽입 정렬 시간 재기=>(팬윅트리,세그먼트트리,이진검색트리, 병합정렬(기억))

*세그먼트,팬윅트리 의 차이점
-- 가장 중요한 차이점=>구간합, 부분합
-- 따라서, 팬윅트리는 1~X까지의 범위를 가져오는 방법(위점화식만족해야함) 만 가능.
-- ex) 구간의 최솟값과 최댓값을 구하는 문제 ,
	=> 팬윅트리로는 못 푼다. =>점화식만족(X)=>A[3~4] 구간의 최솟값을 구한다면??


*큐와 스택 & 데크
--  ex) BOJ_6549 히스토그램 문제
--  스위핑 알고리즘(Sweeping Algorithm) 휩쓸면서 지나간다는 개념.
-- 종만북ex) 짝에 맞지 않는 괄호,외계 신호 분석
