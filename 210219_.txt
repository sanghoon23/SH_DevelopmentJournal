
@C++ 기초플러스 돌아보기

*함수프로그래밍 모듈
-- 함수 동작 과정,, 원형부, 정의부
-- 함수 원형은 왜 필요한가??
-- 컴파일러는 함수원형이 꼭 필요한가??
-- 컴파일러, 함수의 파라미터 자동변환(이치에맞을때), 정적데이터형검사
-- 형식 매개변수(parameter)(=자동변수,데이터무결성), 실제 매개변수(argument)
-- Func(int arr[]), arr[i]=*( arr + i ), &arr[i] = ( arr + i )
-- const int* pt = begin, for(pt=begin, pt != end , pt++)
-- 함수 주소 얻기, 함수지시 포인터


```
void Func(int (*arr)[3]){} 
void Func2(int arr[][4]){} 
void Func3(int arr[3][4]) {} 
void PrintAll(int(*Arr)[3], int Size) { for (int j = 0; j < Size; ++j) for (int i = 0; i < 3; ++i) printf("%d ", Arr[j][i]); printf("\n"); } 
int main() 
{ 
	/////////////////////////////////////////////////////////////////////////////////// 
	//C++ - 함수와 2차원 배열 
	int Arr2[3][3] = { {12, 13, 14 }, {15, 16, 17}, {9, 10, 11} }; 
	for (int j = 0; j < 3; ++j) 
	{ 
		for (int i = 0; i < 3; ++i) 
		{ 
			//int Temp = (*Arr2 + j)[i]; // =>2차원배열은 메모리에 이어져 생성된다. 
			/* 
			12, 13, 14, 
			13, 14, 15, 
			14, 15, 16 
			*/ 
			int Temp = *(Arr2 + j)[i]; // => 연산자 우선순위 ([] > *) 
			/* 
			풀어쓰면, **((Arr2 + j) + i) 
			결국 Arr2 포인터가가리키는 크기가 'j + i' 만큼 옮겨진다. 
			또한 rValue 에서의 '*' '*' (두번) 이므로, * 포인터의 값을 구하는 연산을 두번 실행 
			*/ 
			//int Temp = (*(Arr2 + j))[i]; // => Arr2 포인터가 가리키는 크기가 'j' 만큼 옮겨진다. 
			/* 
			12, 13, 14 
			15, 16, 17 
			9, 10, 11 
			*/ 
			printf("%d,", Temp); 
			int A = 0; 
		} 
		printf("\n"); 
	} 
	int* Test0Arr = Arr2[0]; 
	int(*Test1Arr)[3] = Arr2; //@배열포인터 
	PrintAll(Test1Arr, 3); 
	int** Temp1Arr = new int*[4]; //@포인터배열 
	for (int j = 0; j < 4; ++j) 
	{ 
		Temp1Arr[j] = new int[4]; 
		for (int i = 0; i < 4; ++i) 
			Temp1Arr[j][i] = 1 * i; 
	} 
	int InsertArr[4] = { 1, 2, 3 }; 
	int(*Temp2Arr)[4] = &InsertArr; //@배열포인터 
	//@2차원배열 매개변수 
	//void Func(int(*arr)[3], int Size ...) 
	//void Func2(int arr[][4], int Size ...) 
	//void Func3(int arr[3][4]) {} 
	Func(Arr2); 
	return 0; 
}
```


*가능하다면 형식매개변수에서 const 를 지시하는 포인터로 선언하는게 좋음.
하지만, 무조건적인 이야기는 아님.
1. 에러 예방
2. const, const 아닌 매개변수 둘 다 처리할 수 있음
```
//@const
        int A = 30; 
	int* p1 = &A; 
	const int* cp1 = &A; 
	//const int* cp2 = p1; 
	//int* tp2 = cp1; //ERROR 
	int** p2 = &p1; //OK 
	//const int** cp2 = &p1; //ERROR Comfile(Pointer) 
	//const int** cp2 = p2; //ERROR Comfile(Pointer) 
	//const int** cp2 = &cp1; //OK 
	//const int** cp2 = &cp1; //OK 
	//const int** cp3 = cp2; //OK 
	//const int** pp2; 
	//int* p1; 
	//const int n = 13; 
	//pp2 = &p1; //ERROR, 하지만 만약된다고 가정하면. 
	//*pp2 = &n; 
	//*p1 = 10; //값이 변경될 수 있다. 
	/* 
	따라서, const int* = &int, 간접지시에 경우에만 유효. 2차원 이상에선 못씀. 
	int B = 20; 
	const int* cp = &B; 
	*/
